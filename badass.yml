version: 2.1
orbs:
  utils: arrai/utils@1.2.0
executors:
  python36:
    environment:
        LANG: en_US.UTF-8
    docker:
     - image: arrai/python:36-centos
     - image: circleci/postgres:10-alpine-ram
     - image: circleci/redis:4
  python35:
    environment:
        LANG: en_US.UTF-8
    docker:
     - image: arrai/python:35-centos
     - image: circleci/postgres:10-alpine-ram
     - image: circleci/redis:4
  python27:
    environment:
        LANG: en_US.UTF-8
    docker:
     - image: arrai/python:27-centos
     - image: circleci/postgres:10-alpine-ram
     - image: circleci/redis:4
jobs:
  badass:
    parameters:
      venv:
        description: "Where the virtual environment lives (no trailing slash or bin/activate)"
        type: string
        default: ${HOME}/.venv
      wd:
        description: "Where tests should be run in the repo (no trailing slash)"
        type: string
      setup:
        description: "Steps to start services."
        type: steps
        default: []
      pip_install_args:
        description: "The args to give pip install to get modules in your venv."
        type: string
      config:
        description: "Steps to setup additional config.json replacements."
        type: steps
        default: []
      executor:
        description: "Execution environment for the test job."
        type: executor
        default: python36
      parallel:
        type: integer
        default: 4
    executor: <<parameters.executor>>
    working_directory: ~/repo
    steps:
      - checkout
      - utils/add_ssh_config
      - utils/make_status_shield:
          status: running
          color: lightblue
          file: ~/status.svg
      - utils/rsync_file:
          file: ~/status.svg
          remote_file: ${CIRCLE_BRANCH}.${CIRCLE_JOB}.svg
          host: docs
      - steps: <<parameters.setup>>
      - setup_python_env:
          venv: <<parameters.venv>>
          pip_install_args: <<parameters.pip_install_args>>
      - setup_badass_config:
          venv: <<parameters.venv>>
          wd: <<parameters.wd>>
      - steps: <<parameters.config>>
      - run_tests:
          venv: <<parameters.venv>>
          wd: <<parameters.wd>>
          parallel: <<parameters.parallel>>
      - coverage_combine_and_html:
          venv: <<parameters.venv>>
          wd: <<parameters.wd>>
      - utils/rsync_folder:
          when: always
          folder: <<parameters.wd>>/htmlcov/
          remote_folder: htmlcov_${CIRCLE_BRANCH}_${CIRCLE_JOB}
          host: docs
      - utils/make_coverage_shield:
          when: always
          link: https://${DOCS_HOST}/${CIRCLE_PROJECT_REPONAME}/htmlcov_${CIRCLE_BRANCH}_${CIRCLE_JOB}/
      - utils/rsync_file:
          when: always
          file: ~/coverage.svg
          remote_file: ${CIRCLE_BRANCH}.${CIRCLE_JOB}.coverage.svg
          host: docs
      - pip_freeze:
          venv: <<parameters.venv>>
          file: ~/pip.freeze
      - utils/rsync_file:
          when: always
          file: ~/pip.freeze
          remote_file: ${CIRCLE_BRANCH}.${CIRCLE_JOB}.freeze
          host: docs
      - utils/make_status_shield:
          when: on_success
          status: passed
          color: brightgreen
          file: ~/status.svg
      - utils/make_status_shield:
          when: on_fail
          status: failed
          color: red
          file: ~/status.svg
      - utils/rsync_file:
          when: always
          file: ~/status.svg
          remote_file: ${CIRCLE_BRANCH}.${CIRCLE_JOB}.svg
          host: docs
commands:
  setup_python_env:
    parameters:
      venv:
        description: "Where the virtual environment lives (no trailing slash or bin/activate)"
        type: string
      pip_install_args:
        type: string
    steps:
      - run:
          name: Setup python environment
          command: |
            mkdir -p ./logs/${CIRCLE_PROJECT_REPONAME}
            pip install <<parameters.pip_install_args>> | cat; test ${PIPESTATUS[0]} -eq 0
            echo "import coverage; coverage.process_startup()" > `python -c "import sys; print([x for x in sys.path if x.find('<<parameters.venv>>') != -1 and x.find('site-packages') != -1][0] + '/coverage-all-the-things.pth')"`
  setup_badass_config:
    parameters:
      venv:
        description: "Where the virtual environment lives (no trailing slash or bin/activate)"
        type: string
      wd:
        description: "Where tests should be run in the repo (no trailing slash)"
        type: string
    steps:
      - run:
          name: Setup badass config
          command: |
            cd <<parameters.wd>>
            cp test_config.json config.json
            export DJANGO_SECRET_KEY=$(openssl rand -base64 33)
            jq '.DJANGO_SECRET_KEY = env.DJANGO_SECRET_KEY' config.json | sponge config.json
  run_tests:
    parameters:
      venv:
        description: "Where the virtual environment lives (no trailing slash or bin/activate)"
        type: string
      wd:
        description: "Where tests should be run in the repo (no trailing slash)"
        type: string
      parallel:
        type: integer
    steps:
      - run:
          name: Run tests
          command: |
              cd <<parameters.wd>>
              coverage run -p manage.py test --parallel=<<parameters.parallel>>
  coverage_combine_and_html:
    parameters:
      venv:
        description: "Where the virtual environment lives (no trailing slash or bin/activate)"
        type: string
      wd:
        description: "Where tests should be run in the repo (no trailing slash)"
        type: string
    steps:
      - run:
          name: Coverage combine and html
          command: |
            cd <<parameters.wd>>
            coverage combine
            coverage html
            coverage report | grep -oP '^TOTAL.*\d' | awk '{print $NF}' >> ~/.coveragep
          when: always
  pip_freeze:
    parameters:
      venv:
        description: "Where the virtual environment lives (no trailing slash or bin/activate)"
        type: string
      file:
        description: "Where the file should get saved"
        type: string
    steps:
      - run:
          command: pip freeze > <<parameters.file>>
          when: always
